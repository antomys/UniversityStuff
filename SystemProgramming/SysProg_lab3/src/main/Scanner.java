/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>/root/IdeaPrjocets/SysProg_lab3/src/main/jflex/generator.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1,  1,  2, 2
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\11\7\1\3\1\2\1\70\1\71\1\1\16\7\4\0\1\3\1\61"+
                  "\1\21\1\0\1\6\1\61\1\65\1\22\1\55\1\55\1\5\1\67"+
                  "\1\55\1\20\1\16\1\4\1\10\11\11\1\64\1\55\1\60\1\56"+
                  "\1\57\1\63\1\0\4\14\1\17\1\15\5\6\1\12\6\6\1\54"+
                  "\4\6\1\13\2\6\1\55\1\23\1\55\1\61\1\6\1\0\1\40"+
                  "\1\52\1\27\1\36\1\35\1\46\1\42\1\30\1\33\1\6\1\41"+
                  "\1\47\1\53\1\26\1\32\1\37\1\6\1\31\1\24\1\43\1\44"+
                  "\1\50\1\45\1\51\1\25\1\34\1\55\1\66\1\55\1\62\6\7"+
                  "\1\72\32\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
                  "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"+
                  "\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0"+
                  "\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0"+
                  "\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0"+
                  "\246\6\1\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0"+
                  "\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0"+
                  "\33\6\5\0\3\6\15\0\6\7\5\0\1\6\4\0\13\7\1\0"+
                  "\1\7\3\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6"+
                  "\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6"+
                  "\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6"+
                  "\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0"+
                  "\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6"+
                  "\3\7\4\0\13\6\65\0\25\6\1\0\10\6\26\0\60\7\66\6"+
                  "\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0"+
                  "\20\6\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
                  "\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7"+
                  "\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7"+
                  "\2\0\12\7\4\6\7\0\2\6\4\0\3\7\1\0\6\6\4\0"+
                  "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
                  "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
                  "\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0"+
                  "\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
                  "\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0"+
                  "\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6"+
                  "\7\0\1\6\6\7\1\0\3\7\1\0\10\6\2\0\2\6\2\0"+
                  "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
                  "\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0"+
                  "\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0"+
                  "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0"+
                  "\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0"+
                  "\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0"+
                  "\1\6\6\0\4\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
                  "\20\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
                  "\1\0\3\6\5\0\2\6\2\7\2\0\12\7\20\0\1\6\3\7"+
                  "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
                  "\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
                  "\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6\15\0"+
                  "\4\7\1\0\10\6\1\0\3\6\1\0\51\6\2\7\1\6\7\7"+
                  "\1\0\3\7\1\0\4\7\1\6\5\0\3\6\1\7\7\0\3\6"+
                  "\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0"+
                  "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0"+
                  "\6\7\1\0\1\7\1\0\10\7\6\0\12\7\2\0\2\7\15\0"+
                  "\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0"+
                  "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
                  "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
                  "\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0"+
                  "\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0"+
                  "\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0"+
                  "\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7"+
                  "\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6"+
                  "\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7"+
                  "\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6"+
                  "\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6"+
                  "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6"+
                  "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6"+
                  "\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6"+
                  "\20\0\126\6\2\0\6\6\3\0\u026c\6\2\0\21\6\1\0\32\6"+
                  "\5\0\113\6\3\0\13\6\7\0\15\6\1\0\4\6\3\7\13\0"+
                  "\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0"+
                  "\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0"+
                  "\12\7\41\0\4\7\1\0\12\7\6\0\130\6\10\0\5\6\2\7"+
                  "\42\6\1\7\1\6\5\0\106\6\12\0\37\6\1\0\14\7\4\0"+
                  "\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\32\6"+
                  "\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7"+
                  "\2\0\13\7\6\0\12\7\15\0\1\6\10\0\16\7\102\0\5\7"+
                  "\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6"+
                  "\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7"+
                  "\3\0\3\6\12\7\44\6\2\0\11\6\107\0\3\7\1\0\25\7"+
                  "\4\6\1\7\4\6\3\7\2\6\3\7\6\0\300\6\72\7\1\0"+
                  "\5\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
                  "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
                  "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
                  "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7"+
                  "\30\0\1\70\1\70\5\7\20\0\2\6\23\0\1\6\13\0\5\7"+
                  "\1\0\12\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\40\6"+
                  "\20\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6"+
                  "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"+
                  "\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6"+
                  "\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6"+
                  "\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6"+
                  "\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0"+
                  "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
                  "\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0"+
                  "\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7"+
                  "\2\0\3\6\1\0\132\6\1\0\4\6\5\0\52\6\2\0\136\6"+
                  "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51eb\6\25\0\u048d\6"+
                  "\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6"+
                  "\1\7\4\0\12\7\1\0\37\6\2\7\120\6\2\7\45\0\11\6"+
                  "\2\0\147\6\2\0\44\6\1\0\10\6\77\0\13\6\1\7\3\6"+
                  "\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0"+
                  "\2\7\62\6\22\7\12\0\12\7\6\0\22\7\6\6\3\0\1\6"+
                  "\1\0\1\6\2\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0"+
                  "\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\6\0\5\6"+
                  "\1\7\12\6\12\7\5\6\1\0\51\6\16\7\11\0\3\6\1\7"+
                  "\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6\3\7\62\6"+
                  "\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6"+
                  "\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6"+
                  "\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\1\0\53\6"+
                  "\1\0\12\6\12\0\163\6\10\7\1\0\2\7\2\0\12\7\6\0"+
                  "\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0"+
                  "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0"+
                  "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
                  "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0"+
                  "\20\7\3\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
                  "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0"+
                  "\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0"+
                  "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\3\0\1\1\2\2\1\3\2\4\1\5\2\6\1\7"+
                  "\1\4\1\10\1\11\20\5\1\7\7\4\1\12\2\13"+
                  "\1\14\1\1\1\12\1\15\1\16\1\0\2\6\1\0"+
                  "\1\6\1\0\16\5\1\17\3\5\1\17\21\5\1\20"+
                  "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\16"+
                  "\2\0\3\6\1\0\17\5\1\30\27\5\1\0\1\6"+
                  "\5\5\1\30\24\5\1\6\16\5\1\17\1\5\1\17"+
                  "\2\5\1\6\13\5\1\6\7\5\1\6\4\5\1\6"+
                  "\2\5\1\6\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\73\0\166\0\261\0\354\0\261\0\261\0\u0127"+
                  "\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\261\0\261"+
                  "\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461"+
                  "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
                  "\0\261\0\u0674\0\u06af\0\261\0\u06ea\0\u0725\0\u0760\0\u079b"+
                  "\0\u07d6\0\u0811\0\261\0\261\0\u084c\0\u0887\0\261\0\u08c2"+
                  "\0\u08fd\0\u0938\0\261\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f"+
                  "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
                  "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u019d\0\u0d5e\0\u0d99\0\u0dd4"+
                  "\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
                  "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
                  "\0\u11bf\0\u11fa\0\261\0\261\0\261\0\261\0\261\0\261"+
                  "\0\261\0\261\0\u1235\0\261\0\u1270\0\u12ab\0\u12e6\0\u1321"+
                  "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
                  "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1"+
                  "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
                  "\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
                  "\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59"+
                  "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
                  "\0\u019d\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce"+
                  "\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6"+
                  "\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e"+
                  "\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556"+
                  "\0\u2591\0\u25cc\0\u2607\0\u2642\0\u1a0b\0\u267d\0\u26b8\0\u26f3"+
                  "\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb"+
                  "\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3"+
                  "\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b"+
                  "\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53"+
                  "\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
                  "\1\13\1\14\4\12\1\15\1\12\1\16\1\17\1\20"+
                  "\1\4\1\21\1\12\1\22\1\23\1\12\1\24\1\12"+
                  "\1\25\1\12\1\26\1\27\1\30\1\31\1\12\1\32"+
                  "\1\33\1\12\1\34\1\35\1\12\1\36\1\12\1\37"+
                  "\1\12\1\40\1\41\1\11\1\42\1\43\1\11\1\44"+
                  "\2\45\1\46\1\47\1\50\1\4\1\7\1\4\1\51"+
                  "\1\52\1\53\16\51\1\54\1\51\1\55\47\51\1\56"+
                  "\1\52\1\53\17\56\1\57\1\55\47\56\75\0\1\6"+
                  "\74\0\1\60\1\61\50\0\1\44\72\0\1\44\22\0"+
                  "\10\12\1\0\1\12\4\0\31\12\15\0\1\12\10\0"+
                  "\2\62\1\63\1\64\1\0\1\63\1\65\1\66\15\0"+
                  "\1\66\10\0\2\63\1\0\1\64\31\0\2\14\1\63"+
                  "\2\0\1\63\1\65\1\66\15\0\1\66\10\0\2\63"+
                  "\33\0\2\65\101\0\1\44\35\0\2\44\21\0\10\12"+
                  "\1\0\1\12\4\0\1\12\1\67\2\12\1\70\12\12"+
                  "\1\71\1\72\1\73\7\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\11\12\1\74\2\12\1\75\3\12"+
                  "\1\76\10\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\4\12\1\77\1\12\1\100\5\12\1\101\6\12"+
                  "\1\102\5\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\11\12\1\103\17\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\2\12\1\104\17\12\1\105\4\12"+
                  "\1\106\1\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\23\12\1\107\1\12\1\110\3\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\6\12\1\111\2\12"+
                  "\1\112\17\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\5\12\1\113\6\12\1\114\3\12\1\115\10\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\26\12"+
                  "\1\116\2\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\6\12\1\117\22\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\4\12\1\120\1\121\23\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\4\12\1\122"+
                  "\24\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\6\12\1\123\1\124\4\12\1\125\6\12\1\126\5\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\6\12"+
                  "\1\127\22\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\5\12\1\130\1\131\22\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\17\12\1\132\11\12\15\0"+
                  "\1\12\56\0\2\44\71\0\1\44\1\0\1\44\76\0"+
                  "\1\44\64\0\1\44\6\0\1\44\63\0\1\44\7\0"+
                  "\1\44\62\0\1\44\10\0\1\44\3\0\1\51\2\0"+
                  "\16\51\1\0\1\51\1\0\47\51\2\0\1\53\70\0"+
                  "\1\53\2\0\16\53\1\133\1\134\1\135\2\53\1\136"+
                  "\2\53\1\137\11\53\1\140\2\53\1\141\3\53\1\142"+
                  "\15\53\3\0\1\56\2\0\17\56\2\0\47\56\1\60"+
                  "\1\143\1\144\70\60\5\145\1\146\65\145\10\0\2\62"+
                  "\3\0\1\63\1\65\1\66\15\0\1\66\10\0\1\63"+
                  "\34\0\1\147\1\150\2\0\2\150\1\0\1\150\7\0"+
                  "\1\150\5\0\2\150\1\0\1\150\5\0\1\150\3\0"+
                  "\1\150\30\0\2\65\3\0\1\63\1\0\1\66\15\0"+
                  "\1\66\10\0\1\63\34\0\2\151\6\0\1\152\46\0"+
                  "\1\152\11\0\10\12\1\0\1\12\4\0\2\12\1\153"+
                  "\26\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\6\12\1\154\22\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\5\12\1\155\6\12\1\156\14\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\13\12\1\157"+
                  "\15\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\7\12\1\160\21\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\21\12\1\105\7\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\17\12\1\161\11\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\23\12\1\162"+
                  "\5\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\14\12\1\163\14\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\2\12\1\164\26\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\1\165\16\12\1\166\11\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\14\12"+
                  "\1\167\14\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\17\12\1\170\11\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\1\171\16\12\1\172\11\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\13\12\1\173"+
                  "\15\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\1\165\30\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\17\12\1\174\11\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\20\12\1\175\10\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\22\12\1\176\6\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\6\12"+
                  "\1\177\1\200\21\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\3\12\1\201\25\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\26\12\1\202\2\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\1\203\30\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\17\12"+
                  "\1\204\11\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\5\12\1\205\1\12\1\206\21\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\1\12\1\105\12\12"+
                  "\1\207\3\12\1\210\10\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\7\12\1\211\21\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\5\12\1\105\23\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\2\12"+
                  "\1\212\26\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\23\12\1\213\5\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\6\12\1\214\22\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\7\12\1\215\13\12"+
                  "\1\216\5\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\11\12\1\217\17\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\6\12\1\220\22\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\5\12\1\221\23\12"+
                  "\15\0\1\12\2\0\1\144\70\0\5\145\1\222\65\145"+
                  "\4\0\1\144\1\146\75\0\1\147\1\150\1\63\1\0"+
                  "\2\150\1\0\1\150\7\0\1\150\5\0\2\150\1\0"+
                  "\1\150\5\0\1\150\1\63\2\0\1\150\30\0\2\223"+
                  "\1\63\1\0\2\223\1\0\1\223\7\0\1\223\5\0"+
                  "\2\223\1\0\1\223\5\0\1\223\1\63\2\0\1\223"+
                  "\30\0\2\151\3\0\1\63\30\0\1\63\34\0\2\151"+
                  "\67\0\10\12\1\0\1\12\4\0\3\12\1\224\25\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\5\12"+
                  "\1\225\23\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\7\12\1\226\21\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\17\12\1\227\11\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\11\12\1\123\17\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\17\12"+
                  "\1\166\11\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\7\12\1\230\21\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\23\12\1\231\5\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\5\12\1\231\23\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\1\225"+
                  "\16\12\1\232\11\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\11\12\1\105\17\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\3\12\1\233\25\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\1\206\30\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\20\12"+
                  "\1\234\10\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\17\12\1\235\11\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\11\12\1\236\17\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\6\12\1\154\14\12"+
                  "\1\237\5\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\11\12\1\240\17\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\26\12\1\241\2\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\14\12\1\242\14\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\17\12"+
                  "\1\243\11\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\24\12\1\244\4\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\15\12\1\245\13\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\23\12\1\227\5\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\17\12"+
                  "\1\246\11\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\6\12\1\105\22\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\6\12\1\247\22\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\1\105\30\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\2\12\1\250"+
                  "\26\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\11\12\1\231\17\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\23\12\1\165\5\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\14\12\1\251\14\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\1\210\30\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\14\12"+
                  "\1\225\14\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\12\12\1\231\16\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\14\12\1\252\14\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\14\12\1\253\14\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\23\12"+
                  "\1\254\5\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\7\12\1\255\21\12\15\0\1\12\4\145\1\144"+
                  "\1\222\65\145\10\0\2\256\1\63\1\0\2\256\1\0"+
                  "\1\256\7\0\1\256\5\0\2\256\1\0\1\256\5\0"+
                  "\1\256\1\63\2\0\1\256\26\0\10\12\1\0\1\12"+
                  "\4\0\4\12\1\257\24\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\17\12\1\105\11\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\3\12\1\260\25\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\7\12"+
                  "\1\261\21\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\24\12\1\165\4\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\7\12\1\262\21\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\4\12\1\105\24\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\5\12"+
                  "\1\263\23\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\14\12\1\264\14\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\5\12\1\265\23\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\11\12\1\266\17\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\2\12"+
                  "\1\267\26\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\23\12\1\210\5\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\20\12\1\270\10\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\11\12\1\271\17\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\14\12"+
                  "\1\272\14\12\15\0\1\12\6\0\10\12\1\0\1\12"+
                  "\4\0\14\12\1\273\14\12\15\0\1\12\6\0\10\12"+
                  "\1\0\1\12\4\0\5\12\1\274\23\12\15\0\1\12"+
                  "\6\0\10\12\1\0\1\12\4\0\21\12\1\275\7\12"+
                  "\15\0\1\12\6\0\10\12\1\0\1\12\4\0\1\276"+
                  "\30\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\23\12\1\277\5\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\17\12\1\122\11\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\15\12\1\105\13\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\11\12\1\300"+
                  "\17\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\2\12\1\301\26\12\15\0\1\12\10\0\2\302\1\63"+
                  "\1\0\2\302\1\0\1\302\7\0\1\302\5\0\2\302"+
                  "\1\0\1\302\5\0\1\302\1\63\2\0\1\302\26\0"+
                  "\10\12\1\0\1\12\4\0\5\12\1\303\23\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\17\12\1\304"+
                  "\11\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\3\12\1\105\25\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\2\12\1\305\26\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\2\12\1\105\26\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\2\12\1\306"+
                  "\26\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\22\12\1\307\6\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\27\12\1\310\1\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\12\12\1\206\16\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\23\12\1\225"+
                  "\5\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\3\12\1\311\25\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\17\12\1\165\11\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\16\12\1\165\12\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\14\12\1\312"+
                  "\14\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\7\12\1\313\21\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\23\12\1\314\5\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\14\12\1\315\14\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\16\12\1\231"+
                  "\12\12\15\0\1\12\10\0\2\316\1\63\1\0\2\316"+
                  "\1\0\1\316\7\0\1\316\5\0\2\316\1\0\1\316"+
                  "\5\0\1\316\1\63\2\0\1\316\26\0\10\12\1\0"+
                  "\1\12\4\0\6\12\1\317\22\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\22\12\1\320\6\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\20\12\1\165"+
                  "\10\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\3\12\1\321\25\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\14\12\1\322\14\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\11\12\1\323\17\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\17\12\1\324"+
                  "\11\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\3\12\1\225\25\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\11\12\1\325\17\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\1\12\1\105\27\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\2\12\1\231"+
                  "\26\12\15\0\1\12\10\0\2\326\1\63\1\0\2\326"+
                  "\1\0\1\326\7\0\1\326\5\0\2\326\1\0\1\326"+
                  "\5\0\1\326\1\63\2\0\1\326\26\0\10\12\1\0"+
                  "\1\12\4\0\2\12\1\327\26\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\13\12\1\105\15\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\11\12\1\330"+
                  "\17\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\3\12\1\165\25\12\15\0\1\12\6\0\10\12\1\0"+
                  "\1\12\4\0\2\12\1\331\26\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\11\12\1\332\17\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\2\12\1\225"+
                  "\26\12\15\0\1\12\10\0\2\333\1\63\1\0\2\333"+
                  "\1\0\1\333\7\0\1\333\5\0\2\333\1\0\1\333"+
                  "\5\0\1\333\1\63\2\0\1\333\26\0\10\12\1\0"+
                  "\1\12\4\0\7\12\1\334\21\12\15\0\1\12\6\0"+
                  "\10\12\1\0\1\12\4\0\6\12\1\335\22\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\17\12\1\206"+
                  "\11\12\15\0\1\12\6\0\10\12\1\0\1\12\4\0"+
                  "\12\12\1\105\16\12\15\0\1\12\10\0\2\336\1\63"+
                  "\1\0\2\336\1\0\1\336\7\0\1\336\5\0\2\336"+
                  "\1\0\1\336\5\0\1\336\1\63\2\0\1\336\26\0"+
                  "\10\12\1\0\1\12\4\0\10\12\1\324\20\12\15\0"+
                  "\1\12\6\0\10\12\1\0\1\12\4\0\22\12\1\105"+
                  "\6\12\15\0\1\12\10\0\2\337\1\63\1\0\2\337"+
                  "\1\0\1\337\7\0\1\337\5\0\2\337\1\0\1\337"+
                  "\5\0\1\337\1\63\2\0\1\337\30\0\2\340\1\63"+
                  "\1\0\2\340\1\0\1\340\7\0\1\340\5\0\2\340"+
                  "\1\0\1\340\5\0\1\340\1\63\2\0\1\340\30\0"+
                  "\2\341\1\63\1\0\2\341\1\0\1\341\7\0\1\341"+
                  "\5\0\2\341\1\0\1\341\5\0\1\341\1\63\2\0"+
                  "\1\341\30\0\2\342\1\63\1\0\2\342\1\0\1\342"+
                  "\7\0\1\342\5\0\2\342\1\0\1\342\5\0\1\342"+
                  "\1\63\2\0\1\342\30\0\2\343\1\63\1\0\2\343"+
                  "\1\0\1\343\7\0\1\343\5\0\2\343\1\0\1\343"+
                  "\5\0\1\343\1\63\2\0\1\343\30\0\2\344\1\63"+
                  "\1\0\2\344\1\0\1\344\7\0\1\344\5\0\2\344"+
                  "\1\0\1\344\5\0\1\344\1\63\2\0\1\344\30\0"+
                  "\2\345\1\63\1\0\2\345\1\0\1\345\7\0\1\345"+
                  "\5\0\2\345\1\0\1\345\5\0\1\345\1\63\2\0"+
                  "\1\345\30\0\2\346\1\63\1\0\2\346\1\0\1\346"+
                  "\7\0\1\346\5\0\2\346\1\0\1\346\5\0\1\346"+
                  "\1\63\2\0\1\346\32\0\1\63\34\0\1\63\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12272];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
          "Unkown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\3\0\1\11\1\1\2\11\7\1\2\11\20\1\1\11"+
                  "\2\1\1\11\6\1\2\11\2\1\1\11\1\1\1\0"+
                  "\1\1\1\11\1\0\1\1\1\0\44\1\10\11\1\1"+
                  "\1\11\2\0\3\1\1\0\47\1\1\0\114\1\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private JavaSymbol symbol(String str,Lexem type) {
    return (new JavaSymbol(str, yyline+1, yycolumn+1,type,-1));
  }
  private JavaSymbol symbol(String str,Lexem type,int charSt) {
    return (new JavaSymbol(str, yyline+1, yycolumn+1,type,charSt));
  }



  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader
            (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2320) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
              zzBuffer, 0,
              zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }
    }

    // numRead < 0
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaSymbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
           zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
          case '\u000B':
          case '\u000C':
          case '\u0085':
          case '\u2028':
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1:
        { return symbol(yytext(),Lexem.error,yychar);
        }
        case 25: break;
        case 2:
        { return symbol(yytext(),Lexem.notLexem);
        }
        case 26: break;
        case 3:
        { return symbol(yytext(),Lexem.whiteSpace);
        }
        case 27: break;
        case 4:
        { return symbol(yytext(),Lexem.operator);
        }
        case 28: break;
        case 5:
        { return symbol(yytext(), Lexem.identifier);
        }
        case 29: break;
        case 6:
        { return symbol(yytext(),Lexem.number);
        }
        case 30: break;
        case 7:
        { return symbol(yytext(),Lexem.separator);
        }
        case 31: break;
        case 8:
        { yybegin(STRING); string.setLength(0);string.append('\"');
        }
        case 32: break;
        case 9:
        { yybegin(CHARLITERAL);string.setLength(0);string.append('\'');
        }
        case 33: break;
        case 10:
        { string.append( yytext() );
        }
        case 34: break;
        case 11:
        { return symbol(string.toString(),Lexem.error,yychar-string.length());
        }
        case 35: break;
        case 12:
        { yybegin(YYINITIAL);string.append('\"');return symbol(string.toString(), Lexem.string);
        }
        case 36: break;
        case 13:
        { yybegin(YYINITIAL);string.append('\''); return symbol(string.toString(), Lexem.string);
        }
        case 37: break;
        case 14:
        { return symbol(yytext(),Lexem.comment);
        }
        case 38: break;
        case 15:
        { return symbol(yytext(),Lexem.keyword);
        }
        case 39: break;
        case 16:
        { string.append( '\"' );
        }
        case 40: break;
        case 17:
        { string.append( '\'' );
        }
        case 41: break;
        case 18:
        { string.append( '\\' );
        }
        case 42: break;
        case 19:
        { string.append( '\n' );
        }
        case 43: break;
        case 20:
        { string.append( '\r' );
        }
        case 44: break;
        case 21:
        { string.append( '\t' );
        }
        case 45: break;
        case 22:
        { string.append( '\f' );
        }
        case 46: break;
        case 23:
        { string.append( '\b' );
        }
        case 47: break;
        case 24:
        { return symbol(yytext(),Lexem.types);
        }
        case 48: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
              case STRING: {
                return symbol(string.toString(),Lexem.error,yychar-string.length());
              }
              case 231: break;
              case CHARLITERAL: {
                return symbol(string.toString(),Lexem.error,yychar-string.length());
              }
              case 232: break;
              default:
              {
                return symbol("eof",Lexem.eof);
              }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
